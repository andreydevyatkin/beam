# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: PostCommit Javadoc

on:
  issue_comment:
    types: [created]
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.issue.number || github.event.pull_request.head.label || github.sha || github.head_ref || github.ref }}-${{ github.event.schedule || github.event.comment.body || github.event.sender.login}}'
  cancel-in-progress: true

#Setting explicit permissions for the action to avoid the default permissions which are `write-all` in case of pull_request_target event
permissions:
  actions: write
  pull-requests: read
  checks: read
  contents: read
  deployments: read
  id-token: write
  issues: read
  discussions: read
  packages: read
  pages: write
  repository-projects: read
  security-events: read
  statuses: read

env:
  GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
  GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
  GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}

jobs:
  beam_PostCommit_Javadoc:
    name: ${{matrix.job_name}} (${{matrix.job_phrase}})
    runs-on: [self-hosted, ubuntu-20.04, main]
    timeout-minutes: 240
    strategy:
      matrix:
        job_name: [beam_PostCommit_Javadoc]
        job_phrase: [Run Javadoc PostCommit]
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      github.event.comment.body == 'Run Javadoc PostCommit'
    steps:
      - uses: actions/checkout@v3
      - name: Setup repository
        uses: ./.github/actions/setup-action
        with:
          comment_phrase: ${{ matrix.job_phrase }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_job: ${{ matrix.job_name }} (${{ matrix.job_phrase }})
      - name: run aggregateJavadoc script
        uses: ./.github/actions/gradle-command-self-hosted-action
        with:
          gradle-command: :sdks:java:javadoc:aggregateJavadoc
      - name: Set Javadoc report path
        id: javadoc_report_path
        run: |
          echo "path=sdks/java/javadoc/build/docs/javadoc" >> $GITHUB_OUTPUT
      # - name: Upload Javadoc Results
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: Javadoc Results
      #     path: '**/${{ steps.javadoc_report_path.outputs.path }}/**'
      - name: Setup Pages
        uses: actions/configure-pages@v3
      # - name: Get Job ID
      #   id: run_details
      #   shell: bash
      #   run: | 
      #     URL="${{github.api_url}}/repos/${{github.repository}}/actions/runs/${{github.run_id}}/jobs"
      #     JOB_ID=$(curl  \
      #     -H 'Authorization: Bearer ${{secrets.GITHUB_TOKEN}}' \
      #     -H "Accept: application/vnd.github+json" \
      #     -H "X-GitHub-Api-Version: 2022-11-28" \
      #     -s $URL | jq -r '.jobs | .[] | select(.name=="${{github.job}}") | .id ')
      #     echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT
      - name: Upload Javadoc Results to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: '${{ github.workspace }}/${{ steps.javadoc_report_path.outputs.path }}'
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          destination_dir: ${{ github.run_id }}

      # - name: Deploy to GitHub Pages
      #   id: deployment
      #   uses: actions/deploy-pages@v2
      #   with:
      #     timeout: 600000
      # - name: GitHub Page url
      #   run: |
      #     echo "path=${{ steps.deployment.outputs.page_url }}" >> $GITHUB_OUTPUT  